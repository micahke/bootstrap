{"docstore/data": {"4ea8c0ef-cd7a-4d47-a485-ab5a1fc7ef73": {"__data__": {"id_": "4ea8c0ef-cd7a-4d47-a485-ab5a1fc7ef73", "embedding": null, "metadata": {"file_name": "setup.py", "relative_path": "setup.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8813e60e0d9f7cacf0c414ae4964816f", "node_type": "4", "metadata": {"file_name": "setup.py", "relative_path": "setup.py"}, "hash": "b98b372bce87ff4036fcb2fb9806c83c95a1adc3eb5c11e4114c2955743398c9"}}, "hash": "ab31618f1136961c2c29beda1c00a65db1f7f0152bec5096cf9ad4fc101ee21a", "text": "from setuptools import setup, find_packages\n  \nsetup(\n    name='bootstrap',\n    version='0.1.0',\n    packages=find_packages(),\n    entry_points={\n        'console_scripts': [\n            'bootstrap = main.script:main',   \n        ],\n    },\n    install_requires=[\n        req.strip() for req in open('requirements.txt').readlines()\n    ],\n)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a0297859-cb5d-4495-9058-bdf1ade38808": {"__data__": {"id_": "a0297859-cb5d-4495-9058-bdf1ade38808", "embedding": null, "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "471e918c4c6dd451b62cbafc115bdb9b", "node_type": "4", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "7183910326257511d1a731d861a85cd950922069ba77059a53e87ac2a2d5e59a"}, "3": {"node_id": "9cf40e59-5de7-4fa2-ba9f-acc70a929f76", "node_type": "1", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "4fdd06502351e09a0d7a4d544ef7151f34ab4d50929776854259b2b223cdd128"}}, "hash": "bdf6ec546c722d66018a334321d9d17b27b842fb93c160b2b59cb0fd7daf689a", "text": "import hashlib\nfrom pydoc import text\nfrom typing import List\nfrom llama_index.indices.base import BaseIndex\nfrom llama_index.schema import BaseNode\nfrom llama_index.storage.docstore.simple_docstore import SimpleDocumentStore\nfrom llama_index.storage.index_store.simple_index_store import SimpleIndexStore\nfrom llama_index.vector_stores.simple import SimpleVectorStore\nimport openai\nimport os\nfrom data.errors import NO_API_KEY\nfrom llama_index import Document, ServiceContext, StorageContext, VectorStoreIndex, load_index_from_storage\nfrom util.fs import read_file\nfrom llama_index.node_parser import SimpleNodeParser\nfrom llama_index.llms import OpenAI\nfrom util.fs import get_bootstrap_dir\n\nclass LlamaClient:\n    def __init__(self) -> None:\n        api_key = os.getenv(\"OPENAI_API_KEY\")\n        if api_key is None:\n            print(NO_API_KEY)\n            exit(0)\n        else:\n            openai.api_key = api_key\n\n    def generate_doc(self, filepath: str) -> Document:\n        filename = filepath.split('/')[-1]\n        relative_path = os.path.relpath(filepath, os.getcwd())\n        doc =  Document(\n            text=read_file(filepath),\n            extra_info={\n                \"file_name\": filename,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9cf40e59-5de7-4fa2-ba9f-acc70a929f76": {"__data__": {"id_": "9cf40e59-5de7-4fa2-ba9f-acc70a929f76", "embedding": null, "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "471e918c4c6dd451b62cbafc115bdb9b", "node_type": "4", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "7183910326257511d1a731d861a85cd950922069ba77059a53e87ac2a2d5e59a"}, "2": {"node_id": "a0297859-cb5d-4495-9058-bdf1ade38808", "node_type": "1", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "bdf6ec546c722d66018a334321d9d17b27b842fb93c160b2b59cb0fd7daf689a"}, "3": {"node_id": "397ca93a-a64a-4f7c-80a9-2d1e199105fc", "node_type": "1", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "29748a2bd149bbcb07d5fd6359d3d96612c0a53ea8971b9bf81564c20950aa33"}}, "hash": "4fdd06502351e09a0d7a4d544ef7151f34ab4d50929776854259b2b223cdd128", "text": "\"relative_path\": relative_path\n            }\n        )\n        # Set the ID as the MD5 hash of the filepath \n        hash = hashlib.md5(filepath.encode()).hexdigest()\n        doc.id_ = hash\n        return doc\n\n\n    def parse_nodes(self, docs: List[Document]) -> List[BaseNode]:\n        parser = SimpleNodeParser.from_defaults(\n            chunk_size=512,\n            chunk_overlap=20\n        )\n        nodes = parser.get_nodes_from_documents(docs)\n        return nodes\n\n    def generate_index_from_nodes(self, nodes: List[BaseNode]) -> VectorStoreIndex:\n        llm = OpenAI(model='gpt-4', temperature=0.1)\n        service_context = ServiceContext.from_defaults(\n            llm=llm\n        )\n        index = VectorStoreIndex(nodes, service_context=service_context)\n        return index", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "397ca93a-a64a-4f7c-80a9-2d1e199105fc": {"__data__": {"id_": "397ca93a-a64a-4f7c-80a9-2d1e199105fc", "embedding": null, "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "471e918c4c6dd451b62cbafc115bdb9b", "node_type": "4", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "7183910326257511d1a731d861a85cd950922069ba77059a53e87ac2a2d5e59a"}, "2": {"node_id": "9cf40e59-5de7-4fa2-ba9f-acc70a929f76", "node_type": "1", "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}, "hash": "4fdd06502351e09a0d7a4d544ef7151f34ab4d50929776854259b2b223cdd128"}}, "hash": "29748a2bd149bbcb07d5fd6359d3d96612c0a53ea8971b9bf81564c20950aa33", "text": "def query(self, index: BaseIndex, prompt: str):\n        qe = index.as_query_engine(streaming=True)\n        response = qe.query(prompt)\n        print('\\n')\n        response.print_response_stream()\n\n    def save_index(self, index: BaseIndex):\n        storagepath = os.path.join(get_bootstrap_dir(), \"storage\")\n        index.storage_context.persist(storagepath)\n\n\n    def load_index(self) -> BaseIndex:\n        storagepath = os.path.join(get_bootstrap_dir(), \"storage\")\n        storage_context = StorageContext.from_defaults(\n            docstore=SimpleDocumentStore.from_persist_dir(persist_dir=storagepath),\n            vector_store=SimpleVectorStore.from_persist_dir(persist_dir=storagepath),\n            index_store=SimpleIndexStore.from_persist_dir(persist_dir=storagepath),\n        )\n        llm = OpenAI(model='gpt-4', temperature=0.1)\n        service_context = ServiceContext.from_defaults(\n            llm=llm\n        )\n        index = load_index_from_storage(storage_context)\n        index._service_context = service_context\n        return index", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c203b006-e926-47f1-958e-7a6bc4ee5e65": {"__data__": {"id_": "c203b006-e926-47f1-958e-7a6bc4ee5e65", "embedding": null, "metadata": {"file_name": "walker.py", "relative_path": "util/walker.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "73dd1e6f7ba6481957549a310c957e4b", "node_type": "4", "metadata": {"file_name": "walker.py", "relative_path": "util/walker.py"}, "hash": "9faae27b17e12eb46640d03f85d8c414d4189c36a9f449de63827326e65003ad"}}, "hash": "aa4edeb52c41e6da8b270f8ad5c8aad2a4d475d3fa743cdcc7996a49e228a854", "text": "import os\nimport re\nfrom typing import List\nfrom data.config import Config\n\n\nclass FileWalker:\n    def __init__(self, config: Config, dir: str) -> None:\n        self.config = config\n        self.dir = dir\n        self.filepaths = []\n\n\n\n    def walk(self) -> List[str]:\n        filepaths = []\n        for dirpath, dirnames, filenames in os.walk(self.dir):\n            base_dirname = os.path.basename(dirpath)\n            if base_dirname in self.config.excluded_dirs:\n                dirnames[:] = []\n                continue\n            for filename in filenames:\n                if any(filename.endswith(ext) for ext in self.config.filetypes):\n                    filepaths.append(os.path.join(dirpath, filename))  \n        return filepaths", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "65138593-7377-4076-95b1-2991b60c4c13": {"__data__": {"id_": "65138593-7377-4076-95b1-2991b60c4c13", "embedding": null, "metadata": {"file_name": "parsers.py", "relative_path": "util/parsers.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3146ead6697fe74d44d166aa2eed024a", "node_type": "4", "metadata": {"file_name": "parsers.py", "relative_path": "util/parsers.py"}, "hash": "6e951d8c885ea6625eda1032f5b6b1d5b7abfc8fe9615be6b76b709210ebbe54"}}, "hash": "b4be07547c57652a37911171476f2da9a98456f1c08e9e6175fd5fd7e0771d31", "text": "import yaml\nfrom data.config import Config\nfrom data.errors import NO_PROJECT_NAME\n\n\ndef parse_config_file(src: str) -> Config:\n    data = yaml.safe_load(src)\n    config = Config() \n    if \"project\" not in data:\n        print(NO_PROJECT_NAME)\n        return\n    \n    config.set_name(data[\"project\"])\n\n    if \"description\" in data:\n        config.set_description(data[\"description\"])\n\n    if \"filetypes\" in data:\n        config.set_filetypes(data['filetypes'])\n\n    if \"excluded_dirs\" in data:\n        config.set_excluded_dirs(data['excluded_dirs'])\n\n    return config", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b8a4bcf3-8cc9-4d33-89f3-c96ce4d1536e": {"__data__": {"id_": "b8a4bcf3-8cc9-4d33-89f3-c96ce4d1536e", "embedding": null, "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ff1d8cad4c58af36f3624910ac1be3e1", "node_type": "4", "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "hash": "cef6d09f6e70cd6f92f479815b3d0ace99ce0f8dd0a50e5ae89989de1ab8e981"}, "3": {"node_id": "f7e492c1-267f-4154-9887-fb857899ce61", "node_type": "1", "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "hash": "482970e1c16823a7bd2bde2e2c6c410b4760c1b2dc097574ded8bd6292b53f01"}}, "hash": "e727fec06dc9c5632f600b34c8b3eb73463f37e6b3afbd4004d68328d330b2d8", "text": "import os\nimport shutil\n\nBOOTSTRAP_FILE_NAME = \".bootstrap\"\n\ndef read_config() -> str:\n    rootdir = os.getcwd()\n    filepath = os.path.join(rootdir, BOOTSTRAP_FILE_NAME)\n    with open(filepath, 'r') as file:\n        return file.read()\n\ndef config_exists() -> bool:\n    rootdir = os.getcwd()\n    filepath = os.path.join(rootdir, BOOTSTRAP_FILE_NAME)\n    return os.path.exists(filepath)\n\ndef read_file(filepath: str) -> str:\n    with open(filepath, 'r') as file:\n        return file.read()\n\n\n\ndef bootstrap_dir_exists() -> bool:\n    rootdir = os.getcwd()\n    path = os.path.join(rootdir, \".boot\")\n    if os.path.exists(path):\n        return True\n    return False\n\ndef create_bootstrap_dir():\n    rootdir = os.getcwd()\n    path = os.path.join(rootdir, \".boot\")\n    os.mkdir(path)\n    os.mkdir(os.path.join(path, \"storage\"))\n\ndef get_bootstrap_dir():\n    rootdir = os.getcwd()\n    return os.path.join(rootdir, \".boot\")\n\n\ndef delete_bootstrap_dir():\n    dir = get_bootstrap_dir()\n    shutil.rmtree(dir)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f7e492c1-267f-4154-9887-fb857899ce61": {"__data__": {"id_": "f7e492c1-267f-4154-9887-fb857899ce61", "embedding": null, "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ff1d8cad4c58af36f3624910ac1be3e1", "node_type": "4", "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "hash": "cef6d09f6e70cd6f92f479815b3d0ace99ce0f8dd0a50e5ae89989de1ab8e981"}, "2": {"node_id": "b8a4bcf3-8cc9-4d33-89f3-c96ce4d1536e", "node_type": "1", "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}, "hash": "e727fec06dc9c5632f600b34c8b3eb73463f37e6b3afbd4004d68328d330b2d8"}}, "hash": "482970e1c16823a7bd2bde2e2c6c410b4760c1b2dc097574ded8bd6292b53f01", "text": "def get_snapshot_filepath() -> str:\n    return os.path.join(get_bootstrap_dir(), \"snapshot\")\n\ndef snapshot_exists() -> bool:\n    return os.path.exists(get_snapshot_filepath())", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5b8e2472-6a34-4210-ac59-d51364bcd733": {"__data__": {"id_": "5b8e2472-6a34-4210-ac59-d51364bcd733", "embedding": null, "metadata": {"file_name": "md_output.py", "relative_path": "util/md_output.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "087008845694f9bddd6c94f117110834", "node_type": "4", "metadata": {"file_name": "md_output.py", "relative_path": "util/md_output.py"}, "hash": "c79583dbba119cb180331641c513bc7de31bc44995f97162730a146813cf79fc"}}, "hash": "d868bb968dcbb2102e2197c5ce8bb781f75794559e2e4e61f8f094f95046f3f0", "text": "# from rich import print\n# from rich.markdown import Markdown\n# from rich.syntax import Syntax\n#\n# markdown_text = \"\"\"\n# # Title\n# Here is some **bold text**, and some *italic text*.\n# \"\"\"\n# markdown = Markdown(markdown_text)\n# print(markdown)\n#\n# code_text = '''\n# def foo(bar):\n#     print(bar)\n# '''\n# syntax = Syntax(code_text, \"python\", theme=\"monokai\", line_numbers=True)\n# print(syntax)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e46bbc3f-a913-449c-8132-2e5989992e80": {"__data__": {"id_": "e46bbc3f-a913-449c-8132-2e5989992e80", "embedding": null, "metadata": {"file_name": "hash_test.py", "relative_path": "script/hash_test.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dc7e8b0f6c24d21c7a6403f2759ca818", "node_type": "4", "metadata": {"file_name": "hash_test.py", "relative_path": "script/hash_test.py"}, "hash": "39ec429018cfc23ab4d37d80a703c0f648afd67f2272a2229cfa78adc324795a"}}, "hash": "2c6211a0fa55e6cf5c96936b5a17e59294e1194797dfa41f6af2b85a6db5f394", "text": "import hashlib\nimport os\n\ndef run():\n    dirname = os.path.dirname(__file__)\n    hash = hashlib.sha256()\n    with open(os.path.join(dirname, \"data/textfile.txt\"), 'rb') as file:\n        for block in iter(lambda: file.read(4096), b\"\"):\n            hash.update(block)\n    print(hash.hexdigest())\n\n\nif __name__ == \"__main__\":\n    run()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6e8c73a8-cbdb-476a-8db9-3f1438a6be6f": {"__data__": {"id_": "6e8c73a8-cbdb-476a-8db9-3f1438a6be6f", "embedding": null, "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "09fe6f109687e4e2026fd8cea14c68ce", "node_type": "4", "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "hash": "7ef5f89691db513bc8eab0714cff3da225b54cf2ba9691361254ecf0cb925fbc"}, "3": {"node_id": "84addb13-ddd0-4f58-8a4a-55c619bba703", "node_type": "1", "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "hash": "9421f36f715cc193edd5e7051058b46c059307aede717665d559da6d0381c186"}}, "hash": "bb28c7af03b75878bf95efde90364dc3b0ecc277071f4dcf5dc9884325aa5205", "text": "import argparse\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom process.build import BuildProcess\nfrom process.delete import DeleteProcess\nfrom process.generation import GenerationProcess\nfrom process.keyprocess import KeyProcess\nfrom util.fs import config_exists, read_config, bootstrap_dir_exists, create_bootstrap_dir, delete_bootstrap_dir\nfrom data.errors import NO_CONFIG_FOUND, NO_QUERY_PROVIDED\nfrom util.parsers import parse_config_file\nfrom util.walker import FileWalker\nfrom llm.llama_index import LlamaClient\n\nparser = argparse.ArgumentParser(description=\"Enter your bootstrap command\")\nsubparsers = parser.add_subparsers(dest=\"command\")\n\nbuild_parser = subparsers.add_parser(\"build\")\ndelete_parser = subparsers.add_parser(\"delete\")\nask_parser = subparsers.add_parser(\"ask\")\nask_parser.add_argument('prompt', nargs=\"?\", default=\"\")\n\n# parser.add_argument(\"-b\", \"--build\", action=\"store_true\")\n# parser.add_argument(\"-d\",\"--delete\", action=\"store_true\")\n# parser.add_argument(\"-q\", \"--query\", nargs=\"?\", default=\"\")\n# parser.add_argument(\"--key\", type=str)\n\n\ndef main():\n    args = parser.parse_args()\n\n    if not config_exists():\n        print(NO_CONFIG_FOUND)\n        exit()\n    cfg_src = read_config()\n    config = parse_config_file(cfg_src)\n\n    # if args.key:\n    #     KeyProcess(args.key).run()\n\n    client = LlamaClient()\n\n    if not bootstrap_dir_exists():\n        create_bootstrap_dir()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "84addb13-ddd0-4f58-8a4a-55c619bba703": {"__data__": {"id_": "84addb13-ddd0-4f58-8a4a-55c619bba703", "embedding": null, "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "09fe6f109687e4e2026fd8cea14c68ce", "node_type": "4", "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "hash": "7ef5f89691db513bc8eab0714cff3da225b54cf2ba9691361254ecf0cb925fbc"}, "2": {"node_id": "6e8c73a8-cbdb-476a-8db9-3f1438a6be6f", "node_type": "1", "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}, "hash": "bb28c7af03b75878bf95efde90364dc3b0ecc277071f4dcf5dc9884325aa5205"}}, "hash": "9421f36f715cc193edd5e7051058b46c059307aede717665d559da6d0381c186", "text": "if args.command == 'build':\n        BuildProcess(config, client).run()\n        exit(0)\n\n    if args.command == 'delete': \n        DeleteProcess().run()\n        exit(0)\n\n    if args.command == 'ask':\n        if args.prompt:\n            GenerationProcess(client, args.prompt).run()\n        else:\n            print(NO_QUERY_PROVIDED)\n\n\n\nif __name__ == \"__main__\":\n    main()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2abb961f-3ffa-454c-ad1d-b900de3af04d": {"__data__": {"id_": "2abb961f-3ffa-454c-ad1d-b900de3af04d", "embedding": null, "metadata": {"file_name": "config.py", "relative_path": "data/config.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c3ec91c7b3ea98fe88f3cd0cfa3f849", "node_type": "4", "metadata": {"file_name": "config.py", "relative_path": "data/config.py"}, "hash": "f815ae206c4108e443bd5192921592aec36b231aa8ba6bd00539333f8ed46f31"}}, "hash": "5cc45aae7d686e8a472606366a476a4c599c3c0c3408afc3ec425ca5f2cb78a3", "text": "from typing import Optional, List\n\nclass Config:\n    def __init__(self, name: Optional[str] = \"\") -> None:\n        self.name = name\n        self.description = \"\"\n        self.filetypes: List[str] = []\n        self.excluded_dirs: List[str] = []\n\n    def set_name(self, name: str):\n        self.name = name\n\n    def set_description(self, description: str):\n        self.description = description\n\n    def set_filetypes(self, filetypes: List[str]):\n        self.filetypes = filetypes\n\n    def set_excluded_dirs(self, excluded_dirs: List[str]):\n        self.excluded_dirs = excluded_dirs", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "858e7d7d-71c5-42c8-ae2b-5f4dbae74e95": {"__data__": {"id_": "858e7d7d-71c5-42c8-ae2b-5f4dbae74e95", "embedding": null, "metadata": {"file_name": "errors.py", "relative_path": "data/errors.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cef4d7c2cadba464db48d1265b4a30c7", "node_type": "4", "metadata": {"file_name": "errors.py", "relative_path": "data/errors.py"}, "hash": "f73ec1aae475d03de1c083913800d92d047a29f8a9cededf034bc6ce0b1418ea"}}, "hash": "831ec779fc4bb8751b0d4dfaf265847c99191d05264df2b621b2eb6b5f23ec17", "text": "NO_CONFIG_FOUND = \"No config found. Please create a .bootstrap file and try again.\"\n\nNO_PROJECT_NAME = \"No project name has been set. Please set the `project` value in your bootstrap file\"\n\nNO_API_KEY = \"No OpenAI API key located. Please set `OPENAI_API_KEY in your path or run 'bootstrap --key YOUR_KEY' to do this for you.\"\n\nNO_QUERY_PROVIDED = \"There was no query provided, please try again.\"", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e8fa9dc9-af6c-4aa8-abad-6cde5390049d": {"__data__": {"id_": "e8fa9dc9-af6c-4aa8-abad-6cde5390049d", "embedding": null, "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e41e414f13327d3e8cc2eb129c09b9ce", "node_type": "4", "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "hash": "349cb5471afdde978eda368c617283d4e07c58ba46f424f007feca2c3774af77"}, "3": {"node_id": "4c7fd685-b972-46f9-8563-8e93a1d0e637", "node_type": "1", "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "hash": "e91a4d460c7c6000a2809227f2ee60ce1213144b981b6f8e92b7d3eb716a996d"}}, "hash": "e56ed04a1fb3a55a28a5b4872211618b33766226ba4ec0aefe79bc5505850072", "text": "import hashlib\nfrom typing import List\nimport json\nfrom util.fs import get_snapshot_filepath\n\n\nclass Snapshot:\n    def __init__(self) -> None:\n        self.items = {}\n    \n    def add_item(self, filepath: str, hash: str):\n        self.items[filepath] = hash  \n\n    def save(self):\n        fp = get_snapshot_filepath()\n        with open(fp, \"w\") as file:\n            json.dump(self.items, file)\n\n    @classmethod\n    def load(cls):\n        fp = get_snapshot_filepath()\n        with open(fp, 'r') as file:\n            items = json.loads(file.read())\n        snapshot = Snapshot()\n        snapshot.items = items\n        return snapshot\n\n    @classmethod\n    def hash_file(cls, filepath: str) -> str:\n        hash = hashlib.sha256()\n        with open(filepath, \"rb\") as file:\n            for block in iter(lambda: file.read(4096), b\"\"):\n                hash.update(block)\n        return hash.hexdigest()\n\n    @classmethod\n    def build(cls, files: List[str]):\n        snapshot = Snapshot()\n        for filepath in files:\n            hash = cls.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c7fd685-b972-46f9-8563-8e93a1d0e637": {"__data__": {"id_": "4c7fd685-b972-46f9-8563-8e93a1d0e637", "embedding": null, "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e41e414f13327d3e8cc2eb129c09b9ce", "node_type": "4", "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "hash": "349cb5471afdde978eda368c617283d4e07c58ba46f424f007feca2c3774af77"}, "2": {"node_id": "e8fa9dc9-af6c-4aa8-abad-6cde5390049d", "node_type": "1", "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}, "hash": "e56ed04a1fb3a55a28a5b4872211618b33766226ba4ec0aefe79bc5505850072"}}, "hash": "e91a4d460c7c6000a2809227f2ee60ce1213144b981b6f8e92b7d3eb716a996d", "text": "hash_file(filepath)\n            snapshot.add_item(filepath, hash)\n        return snapshot\n    \n\n    @classmethod\n    def compare(cls, old: 'Snapshot', new: 'Snapshot') -> tuple[List[str], List[str], List[str]]:\n        _new = []\n        _updated =  []\n        _deleted = []\n\n        # find new and updated files\n        for file_path, new_hash in new.items.items():\n            old_hash = old.items.get(file_path)\n            if old_hash is None:\n                _new.append(file_path)\n            elif old_hash != new_hash:\n                _updated.append(file_path)\n\n        # find deleted files\n        for file_path in old.items.keys():\n            if file_path not in new.items:\n                _deleted.append(file_path)\n\n        return _new, _updated, _deleted", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bc8a399-7c8f-496d-bfe3-8f742afe75f0": {"__data__": {"id_": "1bc8a399-7c8f-496d-bfe3-8f742afe75f0", "embedding": null, "metadata": {"file_name": "delete.py", "relative_path": "process/delete.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1e2d0c2555792e9e45661a316e9d688a", "node_type": "4", "metadata": {"file_name": "delete.py", "relative_path": "process/delete.py"}, "hash": "0c54c8b47d6e1a5fbaf807e7eb866e6659f1c474b9c59b4af4574dce116e3008"}}, "hash": "49e1f903f07c92073a25ffb467f72c5c71a15f77b058b1e0cc0fb01bf132d559", "text": "from typing import Any\nfrom process.process import Process\nfrom util.fs import delete_bootstrap_dir\n\n\nclass DeleteProcess(Process):\n    def __init__(self) -> None:\n        super().__init__()\n\n    def run(self, args: Any = None):\n        delete_bootstrap_dir()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cdda32e4-31b3-49eb-9d2d-1f45d3530275": {"__data__": {"id_": "cdda32e4-31b3-49eb-9d2d-1f45d3530275", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "542bfbbba4ef762b625970253f9712bcdeb33a3f3d563b843762274d3866938f"}, "3": {"node_id": "fde0acda-65f6-44ab-8285-d311d5732c17", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "2717aa0ec74f0788af8283a16123f5d6b8d02adf8468673fa654442c8bd1d8fa"}}, "hash": "7d3f28e10cf4589565463c30a2c13703ef14e78db71092750dada0995bb6f994", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.delete_ref_doc(hash)\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fde0acda-65f6-44ab-8285-d311d5732c17": {"__data__": {"id_": "fde0acda-65f6-44ab-8285-d311d5732c17", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "542bfbbba4ef762b625970253f9712bcdeb33a3f3d563b843762274d3866938f"}, "2": {"node_id": "cdda32e4-31b3-49eb-9d2d-1f45d3530275", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "7d3f28e10cf4589565463c30a2c13703ef14e78db71092750dada0995bb6f994"}}, "hash": "2717aa0ec74f0788af8283a16123f5d6b8d02adf8468673fa654442c8bd1d8fa", "text": "delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1543999a-711d-49a9-aa60-6baf7546f6da": {"__data__": {"id_": "1543999a-711d-49a9-aa60-6baf7546f6da", "embedding": null, "metadata": {"file_name": "generation.py", "relative_path": "process/generation.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8880c0d89319431dae3c49d763b11383", "node_type": "4", "metadata": {"file_name": "generation.py", "relative_path": "process/generation.py"}, "hash": "c73f7fc019ed111f61ca870972baa84321831e62974e25b860e7597d77741698"}}, "hash": "82e385958ba5246479627c3d9b3161919f07ec05581c8844ab48f0b695dfc54b", "text": "from llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom typing import Any\n\nclass GenerationProcess(Process):\n    def __init__(self, client: LlamaClient, prompt: str) -> None:\n        super().__init__()\n        self.client = client\n        self.prompt = prompt\n\n\n    def run(self, args: Any = None):\n        index = self.client.load_index()\n        self.client.query(index, self.prompt)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f1c57910-e8da-4c45-8a2d-fe63f127e711": {"__data__": {"id_": "f1c57910-e8da-4c45-8a2d-fe63f127e711", "embedding": null, "metadata": {"file_name": "keyprocess.py", "relative_path": "process/keyprocess.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dde91e35690052e786795b16603467b8", "node_type": "4", "metadata": {"file_name": "keyprocess.py", "relative_path": "process/keyprocess.py"}, "hash": "7a2b14281b06df699065559b195c93aa167c00d532ab33bd50f1db6b65ffcb18"}}, "hash": "ff3d12ca22d829c115d82376b246b896d3fab068870083529ee320b7c66b125b", "text": "import os\nfrom typing import Any\nfrom process.process import Process\n\n\nclass KeyProcess(Process):\n    def __init__(self, key: str) -> None:\n        super().__init__()\n        self.key = key\n\n    def run(self, args: None):\n        os.environ['OPENAI_API_KEY'] = self.key", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "df3cc4d3-7943-4883-bc68-77285bfc3275": {"__data__": {"id_": "df3cc4d3-7943-4883-bc68-77285bfc3275", "embedding": null, "metadata": {"file_name": "process.py", "relative_path": "process/process.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b15009cde98d00318f0ac4aed9c62783", "node_type": "4", "metadata": {"file_name": "process.py", "relative_path": "process/process.py"}, "hash": "449261c61508bc476d010bc2c22a230303d8c25fde5e7d3267d11c70b2cd7386"}}, "hash": "1b4f9971ff38e3e05cbc03dcc68c56bf176a7fd65f96027668a02d76616c91eb", "text": "from abc import abstractmethod\nfrom typing import Any\n\nclass Process:\n    def __init__(self) -> None:\n        pass\n    \n    @abstractmethod\n    def run(self, args: Any):\n        pass", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a315ebd9-793f-4f2b-9090-631f02aec76a": {"__data__": {"id_": "a315ebd9-793f-4f2b-9090-631f02aec76a", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "279e11993990726b32067b899f8b634f1bfdb290dcd6e22eb8814686bb7d181b"}, "3": {"node_id": "277a7852-f2bb-4ed1-a3d8-3432017ff91f", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "965e1897773869b3e30effe5e2a4a9d7993e8be574b28129345996a370b49519"}}, "hash": "0accd7abd91af725dc614e48a832cd8827ef9078933141d6a4d62a46761ab0e6", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.delete_ref_doc(hash)\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n            print(\"UPDATED DOC\")\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "277a7852-f2bb-4ed1-a3d8-3432017ff91f": {"__data__": {"id_": "277a7852-f2bb-4ed1-a3d8-3432017ff91f", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "279e11993990726b32067b899f8b634f1bfdb290dcd6e22eb8814686bb7d181b"}, "2": {"node_id": "a315ebd9-793f-4f2b-9090-631f02aec76a", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "0accd7abd91af725dc614e48a832cd8827ef9078933141d6a4d62a46761ab0e6"}}, "hash": "965e1897773869b3e30effe5e2a4a9d7993e8be574b28129345996a370b49519", "text": "hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d440cc63-0969-4462-a9a6-e63f7c96e479": {"__data__": {"id_": "d440cc63-0969-4462-a9a6-e63f7c96e479", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "b107fafa7b9c4db38322e2ae9c78fda0d9d4b8ca7755572d6c0b15809bc2ca7e"}, "3": {"node_id": "458b25a6-0c43-4221-bc13-ebe7949d9c28", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75"}}, "hash": "2456923e1fbbd998d18412bf03bc39445a38c01a53ef8693e32ff07bb874277b", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                print(\"Error\")\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "458b25a6-0c43-4221-bc13-ebe7949d9c28": {"__data__": {"id_": "458b25a6-0c43-4221-bc13-ebe7949d9c28", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "b107fafa7b9c4db38322e2ae9c78fda0d9d4b8ca7755572d6c0b15809bc2ca7e"}, "2": {"node_id": "d440cc63-0969-4462-a9a6-e63f7c96e479", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "2456923e1fbbd998d18412bf03bc39445a38c01a53ef8693e32ff07bb874277b"}}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "text": "md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d222f272-17dc-41e1-8f77-8bb69751cf87": {"__data__": {"id_": "d222f272-17dc-41e1-8f77-8bb69751cf87", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "8514849e2b9cff583cb22bfc319009ade8ef1725433d7af1e8b087883902ed09"}, "3": {"node_id": "48a3adbe-7221-4206-ab01-c4058012af6f", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75"}}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                print(\"ERROR\")\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48a3adbe-7221-4206-ab01-c4058012af6f": {"__data__": {"id_": "48a3adbe-7221-4206-ab01-c4058012af6f", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "8514849e2b9cff583cb22bfc319009ade8ef1725433d7af1e8b087883902ed09"}, "2": {"node_id": "d222f272-17dc-41e1-8f77-8bb69751cf87", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc"}}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "text": "md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2d09f8d7-876a-4cd0-be95-997b890024a9": {"__data__": {"id_": "2d09f8d7-876a-4cd0-be95-997b890024a9", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "132e26891223673f898cfa049fa89296a6a349d15bdd16691114118610800b6a"}, "3": {"node_id": "abcd1cf9-7d47-419c-af45-8d020a39309d", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "5907dc67f06dc8690fdfa5bab577c00f9117c078c55c6ce9383ffe20c98f141f"}}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                print(\"ERROR\")\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "abcd1cf9-7d47-419c-af45-8d020a39309d": {"__data__": {"id_": "abcd1cf9-7d47-419c-af45-8d020a39309d", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "132e26891223673f898cfa049fa89296a6a349d15bdd16691114118610800b6a"}, "2": {"node_id": "2d09f8d7-876a-4cd0-be95-997b890024a9", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc"}}, "hash": "5907dc67f06dc8690fdfa5bab577c00f9117c078c55c6ce9383ffe20c98f141f", "text": "md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n        print(\"WHAT THE HOOP\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b01ff2d2-545a-48c7-b418-a4634f8661d0": {"__data__": {"id_": "b01ff2d2-545a-48c7-b418-a4634f8661d0", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "8514849e2b9cff583cb22bfc319009ade8ef1725433d7af1e8b087883902ed09"}, "3": {"node_id": "891a3d91-280b-4b4d-954e-a7631c3a9952", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75"}}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                print(\"ERROR\")\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "891a3d91-280b-4b4d-954e-a7631c3a9952": {"__data__": {"id_": "891a3d91-280b-4b4d-954e-a7631c3a9952", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "8514849e2b9cff583cb22bfc319009ade8ef1725433d7af1e8b087883902ed09"}, "2": {"node_id": "b01ff2d2-545a-48c7-b418-a4634f8661d0", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc"}}, "hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "text": "md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "08c539ab-e7e7-4823-a77c-23ecd3cc5bec": {"__data__": {"id_": "08c539ab-e7e7-4823-a77c-23ecd3cc5bec", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "e5127205dd55e9cf746a4b513012182f3e4c6a55e3f52a3a7dcd203911cfd0c2"}, "3": {"node_id": "93ed8a54-6595-45ab-b262-e970d631aab3", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "ae66a0cc6335c7a665ea3d92c108cca56ec529c9ad3119e17836094012826c48"}}, "hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                # One of the nodes already removed\n                pass\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "93ed8a54-6595-45ab-b262-e970d631aab3": {"__data__": {"id_": "93ed8a54-6595-45ab-b262-e970d631aab3", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "e5127205dd55e9cf746a4b513012182f3e4c6a55e3f52a3a7dcd203911cfd0c2"}, "2": {"node_id": "08c539ab-e7e7-4823-a77c-23ecd3cc5bec", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8"}}, "hash": "ae66a0cc6335c7a665ea3d92c108cca56ec529c9ad3119e17836094012826c48", "text": "client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n        print(\"WHAT THE HOOP MAN\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2392c96c-6fa4-494b-aad9-b6476cc1b0b0": {"__data__": {"id_": "2392c96c-6fa4-494b-aad9-b6476cc1b0b0", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "cd9cdfe0009e5f29f2be916cac2b413fea3020540ca49c22edb949d3b8c6876a"}, "3": {"node_id": "a8390b16-5811-436a-9024-747476a1c4e0", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "4467b57784fb6d83f0c3832dda727c15eca53a5adeae4b6bf48f25dd044a8029"}}, "hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8", "text": "import hashlib\nfrom typing import Any, List\nfrom data.config import Config\nfrom data.snapshot import Snapshot\nfrom llm.llama_index import LlamaClient\nfrom process.process import Process\nfrom util.fs import snapshot_exists\nfrom util.walker import FileWalker\n\nclass BuildProcess(Process):\n    def __init__(self, config: Config, client: LlamaClient) -> None:\n        super().__init__()\n        self.config = config\n        self.client = client\n\n    def update_index(self, new: List[str], updated: List[str], deleted: List[str]):\n        index = self.client.load_index()\n        docs = []\n        for file in new:\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        for file in updated:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            try:\n                index.delete_ref_doc(hash)\n            except:\n                # One of the nodes already removed\n                pass\n\n            doc = self.client.generate_doc(file)\n            docs.append(doc)\n\n        nodes = self.client.parse_nodes(docs)\n        index.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a8390b16-5811-436a-9024-747476a1c4e0": {"__data__": {"id_": "a8390b16-5811-436a-9024-747476a1c4e0", "embedding": null, "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02b2f09e831de8625a047296cc5efbe6", "node_type": "4", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "cd9cdfe0009e5f29f2be916cac2b413fea3020540ca49c22edb949d3b8c6876a"}, "2": {"node_id": "2392c96c-6fa4-494b-aad9-b6476cc1b0b0", "node_type": "1", "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}, "hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8"}}, "hash": "4467b57784fb6d83f0c3832dda727c15eca53a5adeae4b6bf48f25dd044a8029", "text": "client.parse_nodes(docs)\n        index.insert_nodes(nodes)\n        \n        for file in deleted:\n            hash = hashlib.md5(file.encode()).hexdigest()\n            index.delete(hash)\n        self.client.save_index(index)\n        print(\"HI AMMA!\")\n\n\n    def run(self, args: Any = None):\n        files = FileWalker(self.config, \".\").walk()\n        current_snapshot = Snapshot.build(files)\n        if snapshot_exists():\n            old_snapshot = Snapshot.load()\n            new, updated, deleted = Snapshot.compare(old_snapshot, current_snapshot)\n            self.update_index(new, updated, deleted)\n        else:\n            docs = []\n            for file in files:\n                doc = self.client.generate_doc(file)\n                docs.append(doc)\n\n            nodes = self.client.parse_nodes(docs)\n            index = self.client.generate_index_from_nodes(nodes)\n            self.client.save_index(index)\n        current_snapshot.save()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"8813e60e0d9f7cacf0c414ae4964816f": {"node_ids": ["4ea8c0ef-cd7a-4d47-a485-ab5a1fc7ef73"], "metadata": {"file_name": "setup.py", "relative_path": "setup.py"}}, "471e918c4c6dd451b62cbafc115bdb9b": {"node_ids": ["a0297859-cb5d-4495-9058-bdf1ade38808", "9cf40e59-5de7-4fa2-ba9f-acc70a929f76", "397ca93a-a64a-4f7c-80a9-2d1e199105fc"], "metadata": {"file_name": "llama_index.py", "relative_path": "llm/llama_index.py"}}, "73dd1e6f7ba6481957549a310c957e4b": {"node_ids": ["c203b006-e926-47f1-958e-7a6bc4ee5e65"], "metadata": {"file_name": "walker.py", "relative_path": "util/walker.py"}}, "3146ead6697fe74d44d166aa2eed024a": {"node_ids": ["65138593-7377-4076-95b1-2991b60c4c13"], "metadata": {"file_name": "parsers.py", "relative_path": "util/parsers.py"}}, "ff1d8cad4c58af36f3624910ac1be3e1": {"node_ids": ["b8a4bcf3-8cc9-4d33-89f3-c96ce4d1536e", "f7e492c1-267f-4154-9887-fb857899ce61"], "metadata": {"file_name": "fs.py", "relative_path": "util/fs.py"}}, "087008845694f9bddd6c94f117110834": {"node_ids": ["5b8e2472-6a34-4210-ac59-d51364bcd733"], "metadata": {"file_name": "md_output.py", "relative_path": "util/md_output.py"}}, "dc7e8b0f6c24d21c7a6403f2759ca818": {"node_ids": ["e46bbc3f-a913-449c-8132-2e5989992e80"], "metadata": {"file_name": "hash_test.py", "relative_path": "script/hash_test.py"}}, "09fe6f109687e4e2026fd8cea14c68ce": {"node_ids": ["6e8c73a8-cbdb-476a-8db9-3f1438a6be6f", "84addb13-ddd0-4f58-8a4a-55c619bba703"], "metadata": {"file_name": "main.py", "relative_path": "script/main.py"}}, "4c3ec91c7b3ea98fe88f3cd0cfa3f849": {"node_ids": ["2abb961f-3ffa-454c-ad1d-b900de3af04d"], "metadata": {"file_name": "config.py", "relative_path": "data/config.py"}}, "cef4d7c2cadba464db48d1265b4a30c7": {"node_ids": ["858e7d7d-71c5-42c8-ae2b-5f4dbae74e95"], "metadata": {"file_name": "errors.py", "relative_path": "data/errors.py"}}, "e41e414f13327d3e8cc2eb129c09b9ce": {"node_ids": ["e8fa9dc9-af6c-4aa8-abad-6cde5390049d", "4c7fd685-b972-46f9-8563-8e93a1d0e637"], "metadata": {"file_name": "snapshot.py", "relative_path": "data/snapshot.py"}}, "1e2d0c2555792e9e45661a316e9d688a": {"node_ids": ["1bc8a399-7c8f-496d-bfe3-8f742afe75f0"], "metadata": {"file_name": "delete.py", "relative_path": "process/delete.py"}}, "02b2f09e831de8625a047296cc5efbe6": {"node_ids": ["cdda32e4-31b3-49eb-9d2d-1f45d3530275", "fde0acda-65f6-44ab-8285-d311d5732c17", "a315ebd9-793f-4f2b-9090-631f02aec76a", "277a7852-f2bb-4ed1-a3d8-3432017ff91f", "d440cc63-0969-4462-a9a6-e63f7c96e479", "458b25a6-0c43-4221-bc13-ebe7949d9c28", "d222f272-17dc-41e1-8f77-8bb69751cf87", "48a3adbe-7221-4206-ab01-c4058012af6f", "2d09f8d7-876a-4cd0-be95-997b890024a9", "abcd1cf9-7d47-419c-af45-8d020a39309d", "b01ff2d2-545a-48c7-b418-a4634f8661d0", "891a3d91-280b-4b4d-954e-a7631c3a9952", "08c539ab-e7e7-4823-a77c-23ecd3cc5bec", "93ed8a54-6595-45ab-b262-e970d631aab3", "2392c96c-6fa4-494b-aad9-b6476cc1b0b0", "a8390b16-5811-436a-9024-747476a1c4e0"], "metadata": {"file_name": "build.py", "relative_path": "process/build.py"}}, "8880c0d89319431dae3c49d763b11383": {"node_ids": ["1543999a-711d-49a9-aa60-6baf7546f6da"], "metadata": {"file_name": "generation.py", "relative_path": "process/generation.py"}}, "dde91e35690052e786795b16603467b8": {"node_ids": ["f1c57910-e8da-4c45-8a2d-fe63f127e711"], "metadata": {"file_name": "keyprocess.py", "relative_path": "process/keyprocess.py"}}, "b15009cde98d00318f0ac4aed9c62783": {"node_ids": ["df3cc4d3-7943-4883-bc68-77285bfc3275"], "metadata": {"file_name": "process.py", "relative_path": "process/process.py"}}}, "docstore/metadata": {"4ea8c0ef-cd7a-4d47-a485-ab5a1fc7ef73": {"doc_hash": "ab31618f1136961c2c29beda1c00a65db1f7f0152bec5096cf9ad4fc101ee21a", "ref_doc_id": "8813e60e0d9f7cacf0c414ae4964816f"}, "a0297859-cb5d-4495-9058-bdf1ade38808": {"doc_hash": "bdf6ec546c722d66018a334321d9d17b27b842fb93c160b2b59cb0fd7daf689a", "ref_doc_id": "471e918c4c6dd451b62cbafc115bdb9b"}, "9cf40e59-5de7-4fa2-ba9f-acc70a929f76": {"doc_hash": "4fdd06502351e09a0d7a4d544ef7151f34ab4d50929776854259b2b223cdd128", "ref_doc_id": "471e918c4c6dd451b62cbafc115bdb9b"}, "397ca93a-a64a-4f7c-80a9-2d1e199105fc": {"doc_hash": "29748a2bd149bbcb07d5fd6359d3d96612c0a53ea8971b9bf81564c20950aa33", "ref_doc_id": "471e918c4c6dd451b62cbafc115bdb9b"}, "c203b006-e926-47f1-958e-7a6bc4ee5e65": {"doc_hash": "aa4edeb52c41e6da8b270f8ad5c8aad2a4d475d3fa743cdcc7996a49e228a854", "ref_doc_id": "73dd1e6f7ba6481957549a310c957e4b"}, "65138593-7377-4076-95b1-2991b60c4c13": {"doc_hash": "b4be07547c57652a37911171476f2da9a98456f1c08e9e6175fd5fd7e0771d31", "ref_doc_id": "3146ead6697fe74d44d166aa2eed024a"}, "b8a4bcf3-8cc9-4d33-89f3-c96ce4d1536e": {"doc_hash": "e727fec06dc9c5632f600b34c8b3eb73463f37e6b3afbd4004d68328d330b2d8", "ref_doc_id": "ff1d8cad4c58af36f3624910ac1be3e1"}, "f7e492c1-267f-4154-9887-fb857899ce61": {"doc_hash": "482970e1c16823a7bd2bde2e2c6c410b4760c1b2dc097574ded8bd6292b53f01", "ref_doc_id": "ff1d8cad4c58af36f3624910ac1be3e1"}, "5b8e2472-6a34-4210-ac59-d51364bcd733": {"doc_hash": "d868bb968dcbb2102e2197c5ce8bb781f75794559e2e4e61f8f094f95046f3f0", "ref_doc_id": "087008845694f9bddd6c94f117110834"}, "e46bbc3f-a913-449c-8132-2e5989992e80": {"doc_hash": "2c6211a0fa55e6cf5c96936b5a17e59294e1194797dfa41f6af2b85a6db5f394", "ref_doc_id": "dc7e8b0f6c24d21c7a6403f2759ca818"}, "6e8c73a8-cbdb-476a-8db9-3f1438a6be6f": {"doc_hash": "bb28c7af03b75878bf95efde90364dc3b0ecc277071f4dcf5dc9884325aa5205", "ref_doc_id": "09fe6f109687e4e2026fd8cea14c68ce"}, "84addb13-ddd0-4f58-8a4a-55c619bba703": {"doc_hash": "9421f36f715cc193edd5e7051058b46c059307aede717665d559da6d0381c186", "ref_doc_id": "09fe6f109687e4e2026fd8cea14c68ce"}, "2abb961f-3ffa-454c-ad1d-b900de3af04d": {"doc_hash": "5cc45aae7d686e8a472606366a476a4c599c3c0c3408afc3ec425ca5f2cb78a3", "ref_doc_id": "4c3ec91c7b3ea98fe88f3cd0cfa3f849"}, "858e7d7d-71c5-42c8-ae2b-5f4dbae74e95": {"doc_hash": "831ec779fc4bb8751b0d4dfaf265847c99191d05264df2b621b2eb6b5f23ec17", "ref_doc_id": "cef4d7c2cadba464db48d1265b4a30c7"}, "e8fa9dc9-af6c-4aa8-abad-6cde5390049d": {"doc_hash": "e56ed04a1fb3a55a28a5b4872211618b33766226ba4ec0aefe79bc5505850072", "ref_doc_id": "e41e414f13327d3e8cc2eb129c09b9ce"}, "4c7fd685-b972-46f9-8563-8e93a1d0e637": {"doc_hash": "e91a4d460c7c6000a2809227f2ee60ce1213144b981b6f8e92b7d3eb716a996d", "ref_doc_id": "e41e414f13327d3e8cc2eb129c09b9ce"}, "1bc8a399-7c8f-496d-bfe3-8f742afe75f0": {"doc_hash": "49e1f903f07c92073a25ffb467f72c5c71a15f77b058b1e0cc0fb01bf132d559", "ref_doc_id": "1e2d0c2555792e9e45661a316e9d688a"}, "cdda32e4-31b3-49eb-9d2d-1f45d3530275": {"doc_hash": "7d3f28e10cf4589565463c30a2c13703ef14e78db71092750dada0995bb6f994", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "fde0acda-65f6-44ab-8285-d311d5732c17": {"doc_hash": "2717aa0ec74f0788af8283a16123f5d6b8d02adf8468673fa654442c8bd1d8fa", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "1543999a-711d-49a9-aa60-6baf7546f6da": {"doc_hash": "82e385958ba5246479627c3d9b3161919f07ec05581c8844ab48f0b695dfc54b", "ref_doc_id": "8880c0d89319431dae3c49d763b11383"}, "f1c57910-e8da-4c45-8a2d-fe63f127e711": {"doc_hash": "ff3d12ca22d829c115d82376b246b896d3fab068870083529ee320b7c66b125b", "ref_doc_id": "dde91e35690052e786795b16603467b8"}, "df3cc4d3-7943-4883-bc68-77285bfc3275": {"doc_hash": "1b4f9971ff38e3e05cbc03dcc68c56bf176a7fd65f96027668a02d76616c91eb", "ref_doc_id": "b15009cde98d00318f0ac4aed9c62783"}, "a315ebd9-793f-4f2b-9090-631f02aec76a": {"doc_hash": "0accd7abd91af725dc614e48a832cd8827ef9078933141d6a4d62a46761ab0e6", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "277a7852-f2bb-4ed1-a3d8-3432017ff91f": {"doc_hash": "965e1897773869b3e30effe5e2a4a9d7993e8be574b28129345996a370b49519", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "d440cc63-0969-4462-a9a6-e63f7c96e479": {"doc_hash": "2456923e1fbbd998d18412bf03bc39445a38c01a53ef8693e32ff07bb874277b", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "458b25a6-0c43-4221-bc13-ebe7949d9c28": {"doc_hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "d222f272-17dc-41e1-8f77-8bb69751cf87": {"doc_hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "48a3adbe-7221-4206-ab01-c4058012af6f": {"doc_hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "2d09f8d7-876a-4cd0-be95-997b890024a9": {"doc_hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "abcd1cf9-7d47-419c-af45-8d020a39309d": {"doc_hash": "5907dc67f06dc8690fdfa5bab577c00f9117c078c55c6ce9383ffe20c98f141f", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "b01ff2d2-545a-48c7-b418-a4634f8661d0": {"doc_hash": "d580824b29bb0101a4f547b5b9baf49bd1f7a81bd78a49339e0ef2b8cd6493fc", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "891a3d91-280b-4b4d-954e-a7631c3a9952": {"doc_hash": "4c650ce632a47257683b7faa952b4f3543ea755be62fb6fb3f0fc3fe34f42e75", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "08c539ab-e7e7-4823-a77c-23ecd3cc5bec": {"doc_hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "93ed8a54-6595-45ab-b262-e970d631aab3": {"doc_hash": "ae66a0cc6335c7a665ea3d92c108cca56ec529c9ad3119e17836094012826c48", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "2392c96c-6fa4-494b-aad9-b6476cc1b0b0": {"doc_hash": "494c13980a4437f277d8262443c9359f26f22b37db86991f9a5a67c0f35281b8", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}, "a8390b16-5811-436a-9024-747476a1c4e0": {"doc_hash": "4467b57784fb6d83f0c3832dda727c15eca53a5adeae4b6bf48f25dd044a8029", "ref_doc_id": "02b2f09e831de8625a047296cc5efbe6"}}}